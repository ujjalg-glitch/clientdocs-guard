// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  role          String    @default("user")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  profile         Profile?
  posts           Post[]
  files           File[]
  userRoles       UserRole[]
  permissions     UserPermission[]
  clientGroups    ClientGroup[]
  groupMemberships GroupMember[]
  sharesCreated   DocumentShare[] @relation("SharedBy")
  sharesReceived  DocumentShare[] @relation("SharedWith")
  accessLogs      AccessLog[]
  comments        DocumentComment[]
  hints           NextStepHint[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  bio       String?
  website   String?
  location  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

// Role-based access control
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userRoles     UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "users", "files", "posts"
  action      String   // e.g., "create", "read", "update", "delete"
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userPermissions   UserPermission[]
  rolePermissions   RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserPermission {
  id           String @id @default(uuid())
  userId       String @map("user_id")
  permissionId String @map("permission_id")
  granted      Boolean @default(true)
  createdAt    DateTime @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String @map("role_id")
  permissionId String @map("permission_id")
  granted      Boolean @default(true)
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// File management
model File {
  id             String   @id @default(uuid())
  filename       String
  originalName   String   @map("original_name")
  mimeType       String   @map("mime_type")
  size           Int
  path           String
  url            String?
  isPublic       Boolean  @default(false) @map("is_public")
  uploadedBy     String   @map("uploaded_by")
  watermarkText  String?  @map("watermark_text")
  expiresAt      DateTime? @map("expires_at")
  downloadCount  Int      @default(0) @map("download_count")
  viewCount      Int      @default(0) @map("view_count")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  uploader        User              @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  shares          DocumentShare[]
  accessLogs      AccessLog[]
  comments        DocumentComment[]
  hints           NextStepHint[]

  @@map("files")
}

// Client Groups for organizing users
model ClientGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdBy   String   @map("created_by")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  creator     User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  members     GroupMember[]
  shares      DocumentShare[]

  @@map("client_groups")
}

// Group membership
model GroupMember {
  id        String   @id @default(uuid())
  groupId   String   @map("group_id")
  userId    String   @map("user_id")
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at")

  group     ClientGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

// Document sharing with signed URLs
model DocumentShare {
  id                String    @id @default(uuid())
  fileId            String    @map("file_id")
  sharedBy          String    @map("shared_by")
  sharedWith        String?   @map("shared_with")
  clientGroupId     String?   @map("client_group_id")
  accessToken       String    @unique @map("access_token")
  expiresAt         DateTime? @map("expires_at")
  maxDownloads      Int?      @map("max_downloads")
  downloadCount     Int       @default(0) @map("download_count")
  watermarkEnabled  Boolean   @default(false) @map("watermark_enabled")
  viewOnly          Boolean   @default(false) @map("view_only")
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  file              File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharer            User         @relation("SharedBy", fields: [sharedBy], references: [id], onDelete: Cascade)
  recipient         User?        @relation("SharedWith", fields: [sharedWith], references: [id], onDelete: Cascade)
  clientGroup       ClientGroup? @relation(fields: [clientGroupId], references: [id], onDelete: Cascade)
  accessLogs        AccessLog[]

  @@map("document_shares")
}

// Access logs for analytics
model AccessLog {
  id          String   @id @default(uuid())
  fileId      String?  @map("file_id")
  shareId     String?  @map("share_id")
  userId      String?  @map("user_id")
  action      String   // 'view', 'download', 'share', 'comment'
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  referrer    String?
  sessionId   String?  @map("session_id")
  createdAt   DateTime @default(now()) @map("created_at")

  file        File?          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  share       DocumentShare? @relation(fields: [shareId], references: [id], onDelete: Cascade)
  user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_logs")
}

// Document comments for Q&A
model DocumentComment {
  id              String    @id @default(uuid())
  fileId          String    @map("file_id")
  userId          String    @map("user_id")
  comment         String
  pageNumber      Int?      @map("page_number")
  xPosition       Float?    @map("x_position")
  yPosition       Float?    @map("y_position")
  isResolved      Boolean   @default(false) @map("is_resolved")
  parentCommentId String?   @map("parent_comment_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  file            File             @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment   DocumentComment? @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         DocumentComment[] @relation("CommentReplies")

  @@map("document_comments")
}

// Next step hints
model NextStepHint {
  id          String   @id @default(uuid())
  fileId      String   @map("file_id")
  hintText    String   @map("hint_text")
  actionType  String   @map("action_type") // 'sign', 'review', 'approve', 'comment'
  priority    Int      @default(1)
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("next_step_hints")
}

